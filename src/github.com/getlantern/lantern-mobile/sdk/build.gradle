apply plugin: 'android-sdk-manager'
apply plugin: 'android-library'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'

group = 'org.getlantern'
version = '1.9.5-SNAPSHOT'

project.ext {
    groupId = 'org.getlantern'
    artifactId = 'sdk'
    isReleaseVersion = !version.endsWith("SNAPSHOT")
}

buildscript {
    repositories {
        flatDir {
            dirs 'libs'
        }
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'https://plugins.gradle.org/m2/' }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.10'
        classpath 'com.android.tools.build:gradle:1.5.0'
        classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.12.+'
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
    jcenter()
    maven { url 'https://maven.fabric.io/public' }
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
}


android {

    useLibrary 'org.apache.http.legacy'

    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 1
        versionName "1.0"
        consumerProguardFiles 'proguard-rules.pro'
    }

    sourceSets {
        main {
            java {
                srcDir 'src/main/java'
                jniLibs.srcDirs = ['libs/jni']
            }
            resources {
                srcDir 'libs/jni'
            }
        }
    }


    buildTypes {
        release {
            buildConfigField "String", "GROUP", "\"${pom_group_id}\""
            buildConfigField "String", "ARTIFACT_ID", "\"${pom_artifact_id}\""
            buildConfigField "long", "BUILD_TIME", "${System.currentTimeMillis()}L"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            minifyEnabled false
        }
    }

    lintOptions {
        warningsAsErrors false
        abortOnError false
    }

    defaultPublishConfig 'release'
    publishNonDefault false

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

uploadArchives {
    configuration = configurations.archives
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: hasProperty('ossrhUsername')?ossrhUsername:'', password: hasProperty('ossrhPassword')?ossrhPassword:'')
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: hasProperty('ossrhUsername')?ossrhUsername:'', password: hasProperty('ossrhPassword')?ossrhPassword:'')
            }

            pom.project {
                name 'Lantern SDK'
                packaging 'aar'
                description 'Android library for the Lantern circumvention tool'
                url 'https://github.com/getlantern/lantern'
                scm {
                    url 'scm:git@github.com:getlantern/lantern.git'
                    connection 'scm:git@github.com:getlantern/lantern.git'
                    developerConnection 'scm:git@github.com:getlantern/lantern.git'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'atavism'
                        name 'atavism'
                    }
                }
            }

            pom.groupId = 'org.getlantern'
            pom.artifactId = 'android-sdk'
            pom.version = version
        }
    }
}

android.libraryVariants.all { variant ->

    task("generate${variant.name}Javadoc", type: Javadoc) {
        title = "$name $version API"
            description "Generates Javadoc for $variant.name."
            source = variant.javaCompile.source
            ext.androidJar =
            "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
            classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
            options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.links("http://d.android.com/reference/");
        exclude '**/BuildConfig.java'
            exclude '**/R.java'
    }

}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile fileTree(include: ['*.so', '*.jar'], dir: 'libs')
    compile group: 'commons-io', name: 'commons-io', version: '2.0.1'
    compile group: 'org.yaml', name: 'snakeyaml', version: '1.10'
    compile 'com.android.support:appcompat-v7:22.0.0'
    compile 'com.google.android.gms:play-services-analytics:7.0.0'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

signing {
    sign configurations.archives
}
