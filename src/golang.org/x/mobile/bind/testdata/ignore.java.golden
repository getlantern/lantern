// Java class go.ignore.Ignore is a proxy for talking to a Go program.
//   gobind -lang=java ignore
//
// File is generated by gobind. Do not edit.
package go.ignore;

import go.Seq;

public abstract class Ignore {
    static {
        Seq.touch(); // for loading the native library
        init();
    }
    
    private Ignore() {} // uninstantiable
    
    // touch is called from other bound packages to initialize this package
    public static void touch() {}
    
    private static native void init();
    
    public static final class S implements go.Seq.Object, I {
        private final go.Seq.Ref ref;
        
        private S(go.Seq.Ref ref) { this.ref = ref; }
        
        public final go.Seq.Ref ref() { return ref; }
        
        // skipped field F.interface{} with unsupported type: %!T(MISSING)
        
        // skipped method S.Argument with unsupported parameter or return types
        
        // skipped method S.Result with unsupported parameter or return types
        
        @Override public boolean equals(Object o) {
            if (o == null || !(o instanceof S)) {
                return false;
            }
            S that = (S)o;
            // skipped field F.interface{} with unsupported type: %!T(MISSING)
            
            return true;
        }
        
        @Override public int hashCode() {
            return java.util.Arrays.hashCode(new Object[] {});
        }
        
        @Override public String toString() {
            StringBuilder b = new StringBuilder();
            b.append("S").append("{");
            return b.append("}").toString();
        }
    }
    
    public interface I extends go.Seq.Object {
        // skipped method I.Argument with unsupported parameter or return types
        
        // skipped method I.Result with unsupported parameter or return types
        
        public static abstract class Stub implements I {
            private final go.Seq.Ref ref;
            public Stub() {
                ref = go.Seq.createRef(this);
            }
            
            public final go.Seq.Ref ref() { return ref; }
            
        }
        
        static final class Proxy implements I {
            private go.Seq.Ref ref;
        
            Proxy(go.Seq.Ref ref) { this.ref = ref; }
        
            public final go.Seq.Ref ref() { return ref; }
        
            // skipped method I.Argument with unsupported parameter or return types
            
            // skipped method I.Result with unsupported parameter or return types
            
        }
    }
    
    // skipped const NamedConst with unsupported type: *types.Const
    
    
    // skipped variable V with unsupported type: *types.Interface
    
    // skipped variable Var with unsupported type: *types.Interface
    
    // skipped function Argument with unsupported parameter or return types
    
    // skipped function Result with unsupported parameter or return types
    
}
